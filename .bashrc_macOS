# ----------------------------------------------------
# BASH Configuration File
# ----------------------------------------------------

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
# shopt -s globstar

# Notify in Notification Center for long running macOS commands. Requires `brew install terminal-modifier`
# Use like so:
#   sleep 10; alert
alias alert='terminal-notifier -title "$([ $? = 0 ] && echo Terminal || echo Error)" -message "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# ===================================================================
# CUSTOM CONFIGS
# ===================================================================

# Globals -----------------------------------------------------------
BLACK="$(tput setaf 0)"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
BLUE_BOLD="$(tput bold setaf 4)"
MAGENTA="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
WHITE="$(tput setaf 7)"
COLOR_RESET="$(tput sgr0)"

# Functions ---------------------------------------------------------
function psef() {
    ps -ef | grep "$1" | egrep -v grep | grep --color "$1"
}

# Get list of file descriptors used by pid
function fd() {
    ll /proc/"$1"/fd
}

# Git functions
# List and index unstaged changes
function gss() {
    unbuffer git status -s | nl # macOS: requires `brew install expect`
}

# Git operations by index in output of `gss`
function git_idx() {
    local files=$(git status -s | awk '{print $2}')
    local args=""
    for ((i=1;i<=$#;i++)); do
        if [[ ${!i} =~ ^-?[0-9]+$ && ! -f ${!i} ]]; then
            args="$args $(echo $files | awk -v n=${!i} '{print $n}')"
        else
            args="$args ${!i}"
        fi
    done
    git $args
}

# Get current branch in git repo
# Credit: jmatth from ezprompt.com
function parse_git_branch() {
    BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    if [ ! "${BRANCH}" == "" ]
    then
        STAT=`parse_git_dirty`
        echo "[${BRANCH}${STAT}]"
    else
        echo ""
    fi
}

# Get current status of git repo
# Credit: jmatth from ezprompt.com
function parse_git_dirty {
    status=`timeout 1 git status 2>&1 | tee` # macOS: requires `brew install coreutils`
    dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
    untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
    ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
    newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
    renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
    deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
    bits=''
    if [ "${renamed}" == "0" ]; then
        bits=">${bits}"
    fi
    if [ "${ahead}" == "0" ]; then
        bits="*${bits}"
    fi
    if [ "${newfile}" == "0" ]; then
        bits="+${bits}"
    fi
    if [ "${untracked}" == "0" ]; then
        bits="?${bits}"
    fi
    if [ "${deleted}" == "0" ]; then
        bits="x${bits}"
    fi
    if [ "${dirty}" == "0" ]; then
        bits="!${bits}"
    fi
    if [ ! "${bits}" == "" ]; then
        echo " ${bits}"
    else
        echo ""
    fi
}

last_status_color() {
    local status="$?"
    if [[ "$status" != 0 ]]; then
        echo "$RED"
    else
        echo "$GREEN"
    fi
}

# Exports ----------------------------------------------------------
export EDITOR=/usr/bin/vim
export HISTSIZE=10000
export HISTCONTROL=ignoredups   # Remove duplicate history commands in terminal
export PYTHONSTARTUP=~/.pythonrc

# PS1
PS1="\n"                                                    # newline
PS1+="[\[\`last_status_color\`\]\t\[$COLOR_RESET]\] "       # timestamp
PS1+="\[$RED\]\u@\[$MAGENTA\]\h \[$RED\]\w\[$COLOR_RESET\]" # user@host:cwd
PS1+="\n"                                                   # newline
PS1+="\[$CYAN\]\`parse_git_branch\`\[$COLOR_RESET\]$ "      # git branch status
export PS1

# Colorize `less` colors for man pages
export LESS_TERMCAP_mb=$'\E[01;31m'     # Begin blinking
export LESS_TERMCAP_md=$'\E[01;31m'     # Begin bold
export LESS_TERMCAP_me=$'\E[0m'         # End mode
export LESS_TERMCAP_se=$'\E[0m'         # End standout-mode
export LESS_TERMCAP_so=$'\E[01;44;33m'  # Begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'         # End underline
export LESS_TERMCAP_us=$'\E[01;32m'     # Begin underline

# Add color to terminal (macOS)
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced

# Aliases -----------------------------------------------------------
alias ls='ls -GFh'
alias lsc='ls'
alias l='ls'
alias la='ls -a'
alias ll='ls -l'
alias lla='ls -la'
alias cd..='cd ../'
alias ..='cd ../'
alias ...='cd ../'
alias .2='cd ../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../../'
alias cp='cp -iv'
alias mv='mv -iv'
alias mkdir='mkdir -pv'
alias rm='rm -iv'
alias grep='grep --color'
alias agp='ag --py' # macOS: requires `brew install ag`
alias agc='ag --cpp' # macOS: requires `brew install ag`
alias diff='colordiff' # macOS: requires `brew install colordiff`
alias less='less -FSRXcm' # -F: quit if 1 screen -S: no wordwrap -R: raw ctrl chars -X: no termcap init/de-init strs sent to term -c: repaint -m: show percentage
alias les='less'
alias lf='less +F'
alias lg='less +G'
alias u='uptime'

alias p='python'
alias p3='python3'

alias path='echo -e ${PATH//:/\\n}'         # Echo all executable Paths
mcd () { mkdir -p "$1" && cd "$1"; }        # Makes new Dir and jumps inside
ql () { qlmanage -p "$*" >& /dev/null; }    # Opens any file in MacOS Quicklook Preview
trash () { command mv "$@" ~/.Trash ; }     # Moves a file to the MacOS trash

# Git aliases
# Using git_idx function
alias gad='git_idx add'
alias gau='git_idx add -u'
alias gco='git_idx checkout'
alias gcp='git_idx checkout --patch'
alias gd='git_idx diff --color'
alias gdn='git_idx diff --name-only'
alias grh='git_idx reset HEAD'
alias gs='git_idx status'

# Vanilla
alias ga='git add -A'
alias gc='git clone'
alias gcf='git clean -f'
alias gca='git commit -a'
alias gcm='git commit -m'
alias gp='git push origin HEAD'
alias gb='git branch'
alias glog="git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"

# Misc --------------------------------------------------------------
alias desk='cd ~/Desktop/'
alias proj='cd ~/proj/'
